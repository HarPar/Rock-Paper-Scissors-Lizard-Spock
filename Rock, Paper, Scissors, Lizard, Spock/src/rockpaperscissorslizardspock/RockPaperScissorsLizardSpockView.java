/*
 * RockPaperScissorsLizardSpockView.java
 */

/*
 * Rock Paper Scissors Lizard Spock
 * Harshil Parikh
 * ICS 3U
 * Mr. Wilhelm
 * 18/01/2015
 */
package rockpaperscissorslizardspock;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;

/**
 * The application's main frame.
 */
public class RockPaperScissorsLizardSpockView extends FrameView {

    private int userScore = 0;
    private int compScore = 0;
    private String compChoice;
    private String userChoice;
    private String[] rpslsOptions = {"Rock", "Spock", "Paper", "Lizard", "Scissors"};

    public RockPaperScissorsLizardSpockView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
            }
        });

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }

                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();

                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {

                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = RockPaperScissorsLizardSpockApp.getApplication().getMainFrame();
            aboutBox = new RockPaperScissorsLizardSpockAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        RockPaperScissorsLizardSpockApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        rockButton = new javax.swing.JButton();
        paperButton = new javax.swing.JButton();
        spockButton = new javax.swing.JButton();
        ScissorsButton = new javax.swing.JButton();
        lizardButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        instrucLabel = new javax.swing.JLabel();
        youLabel = new javax.swing.JLabel();
        compLabel = new javax.swing.JLabel();
        userScoreLabel = new javax.swing.JLabel();
        compScoreLabel = new javax.swing.JLabel();
        gameResultLabel = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();

        mainPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(410, 484));
        mainPanel.setLayout(null);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(rockpaperscissorslizardspock.RockPaperScissorsLizardSpockApp.class).getContext().getResourceMap(RockPaperScissorsLizardSpockView.class);
        rockButton.setText(resourceMap.getString("rockButton.text")); // NOI18N
        rockButton.setName("rockButton"); // NOI18N
        rockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userOptionActionPerformed(evt);
            }
        });
        mainPanel.add(rockButton);
        rockButton.setBounds(162, 60, 80, 23);

        paperButton.setText(resourceMap.getString("paperButton.text")); // NOI18N
        paperButton.setName("paperButton"); // NOI18N
        paperButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userOptionActionPerformed(evt);
            }
        });
        mainPanel.add(paperButton);
        paperButton.setBounds(310, 260, 61, 23);

        spockButton.setText(resourceMap.getString("spockButton.text")); // NOI18N
        spockButton.setName("spockButton"); // NOI18N
        spockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userOptionActionPerformed(evt);
            }
        });
        mainPanel.add(spockButton);
        spockButton.setBounds(10, 260, 61, 23);

        ScissorsButton.setText(resourceMap.getString("ScissorsButton.text")); // NOI18N
        ScissorsButton.setName("ScissorsButton"); // NOI18N
        ScissorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userOptionActionPerformed(evt);
            }
        });
        mainPanel.add(ScissorsButton);
        ScissorsButton.setBounds(290, 400, 73, 23);

        lizardButton.setText(resourceMap.getString("lizardButton.text")); // NOI18N
        lizardButton.setName("lizardButton"); // NOI18N
        lizardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userOptionActionPerformed(evt);
            }
        });
        mainPanel.add(lizardButton);
        lizardButton.setBounds(40, 400, 61, 23);

        titleLabel.setFont(resourceMap.getFont("titleLabel.font")); // NOI18N
        titleLabel.setForeground(resourceMap.getColor("titleLabel.foreground")); // NOI18N
        titleLabel.setText(resourceMap.getString("titleLabel.text")); // NOI18N
        titleLabel.setName("titleLabel"); // NOI18N
        mainPanel.add(titleLabel);
        titleLabel.setBounds(4, 10, 400, 50);

        instrucLabel.setFont(resourceMap.getFont("instrucLabel.font")); // NOI18N
        instrucLabel.setForeground(resourceMap.getColor("instrucLabel.foreground")); // NOI18N
        instrucLabel.setText(resourceMap.getString("instrucLabel.text")); // NOI18N
        instrucLabel.setName("instrucLabel"); // NOI18N
        mainPanel.add(instrucLabel);
        instrucLabel.setBounds(10, 0, 230, 16);

        youLabel.setFont(resourceMap.getFont("youLabel.font")); // NOI18N
        youLabel.setForeground(resourceMap.getColor("youLabel.foreground")); // NOI18N
        youLabel.setText(resourceMap.getString("youLabel.text")); // NOI18N
        youLabel.setName("youLabel"); // NOI18N
        mainPanel.add(youLabel);
        youLabel.setBounds(60, 70, 60, 30);

        compLabel.setFont(resourceMap.getFont("compLabel.font")); // NOI18N
        compLabel.setForeground(resourceMap.getColor("compLabel.foreground")); // NOI18N
        compLabel.setText(resourceMap.getString("compLabel.text")); // NOI18N
        compLabel.setName("compLabel"); // NOI18N
        mainPanel.add(compLabel);
        compLabel.setBounds(290, 70, 70, 30);

        userScoreLabel.setFont(resourceMap.getFont("userScoreLabel.font")); // NOI18N
        userScoreLabel.setForeground(resourceMap.getColor("userScoreLabel.foreground")); // NOI18N
        userScoreLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userScoreLabel.setText(resourceMap.getString("userScoreLabel.text")); // NOI18N
        userScoreLabel.setName("userScoreLabel"); // NOI18N
        mainPanel.add(userScoreLabel);
        userScoreLabel.setBounds(55, 95, 60, 30);

        compScoreLabel.setFont(resourceMap.getFont("compScoreLabel.font")); // NOI18N
        compScoreLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        compScoreLabel.setText(resourceMap.getString("compScoreLabel.text")); // NOI18N
        compScoreLabel.setName("compScoreLabel"); // NOI18N
        mainPanel.add(compScoreLabel);
        compScoreLabel.setBounds(293, 95, 60, 30);

        gameResultLabel.setFont(resourceMap.getFont("gameResultLabel.font")); // NOI18N
        gameResultLabel.setForeground(resourceMap.getColor("gameResultLabel.foreground")); // NOI18N
        gameResultLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gameResultLabel.setText(resourceMap.getString("gameResultLabel.text")); // NOI18N
        gameResultLabel.setName("gameResultLabel"); // NOI18N
        mainPanel.add(gameResultLabel);
        gameResultLabel.setBounds(0, 430, 400, 30);

        backgroundLabel.setIcon(resourceMap.getIcon("backgroundLabel.icon")); // NOI18N
        backgroundLabel.setText(resourceMap.getString("backgroundLabel.text")); // NOI18N
        backgroundLabel.setAlignmentY(0.0F);
        backgroundLabel.setName("backgroundLabel"); // NOI18N
        mainPanel.add(backgroundLabel);
        backgroundLabel.setBounds(0, 0, 400, 473);

        menuBar.setAlignmentX(0.0F);
        menuBar.setMaximumSize(new java.awt.Dimension(59, 32769));
        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(rockpaperscissorslizardspock.RockPaperScissorsLizardSpockApp.class).getContext().getActionMap(RockPaperScissorsLizardSpockView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItem1);

        menuBar.add(helpMenu);

        jPopupMenu1.setName("jPopupMenu1"); // NOI18N

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Instructions helpMenu = new Instructions();
        helpMenu.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private Integer compIndex(){
        Random rand = new Random();
        Integer compIndex = rand.nextInt((4 - 0) + 1) + 0;
        return compIndex;
    }

    private Integer userIndex(){
        if (userChoice.equalsIgnoreCase(rpslsOptions[0]))
            return 0;
        else if (userChoice.equalsIgnoreCase(rpslsOptions[1]))
            return 1;
        else if (userChoice.equalsIgnoreCase(rpslsOptions[2]))
            return 2;
        else if (userChoice.equalsIgnoreCase(rpslsOptions[3]))
            return 3;
        else
            return 4;
    }

    private String determineWinner(int gameResult){
        if (gameResult == -1 || gameResult == -2 || gameResult == 3 || gameResult == 4){
            compScore++;
            return "Comp Wins.";
        }
        else if (gameResult == -3 || gameResult == -4 || gameResult == 1 || gameResult == 2){
            userScore++;
            return "You Win!";
        }
        else
            return "It's a tie.";
    }

    private String calculatingWinner(){
        int playerIndex = userIndex();
        int compIndex = compIndex();
        compChoice = rpslsOptions[compIndex];
        int gameResult = (playerIndex - compIndex) % 5;
        return determineWinner(gameResult);
    }

    private void calcRoundData(String playerWinLose){
        gameResultLabel.setText("You choose, " + userChoice + " and Comp choose, " + compChoice +". " + playerWinLose);
        userScoreLabel.setText("");
        userScoreLabel.setText(userScore + "");
        compScoreLabel.setText("");
        compScoreLabel.setText(compScore + "");
    }

    private void userOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userOptionActionPerformed

        if (evt.getSource() == rockButton)
            userChoice = rpslsOptions[0];
        else if (evt.getSource() == spockButton)
            userChoice = rpslsOptions[1];
        else if (evt.getSource() == paperButton)
            userChoice = rpslsOptions[2];
        else if (evt.getSource() == lizardButton)
            userChoice = rpslsOptions[3];
        else
            userChoice = rpslsOptions[4];

        calcRoundData(calculatingWinner());
    }//GEN-LAST:event_userOptionActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ScissorsButton;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JLabel compLabel;
    private javax.swing.JLabel compScoreLabel;
    private javax.swing.JLabel gameResultLabel;
    private javax.swing.JLabel instrucLabel;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JButton lizardButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton paperButton;
    private javax.swing.JButton rockButton;
    private javax.swing.JButton spockButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel userScoreLabel;
    private javax.swing.JLabel youLabel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
